// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  reviews       Reviews[]
  likes Likes[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model University {
  universityId   Int       @id @default(autoincrement())
  universityname String    @unique
  date           String    @db.VarChar(31)
  reviews        Reviews[]
}

model Reviews {
  id           Int        @id @default(autoincrement())
  date         String     @db.VarChar(31)
  className    String     @db.VarChar(31)
  title        String     @db.VarChar(31)
  star         Int
  evaluation   String     @db.VarChar(511)
  universityId Int
  createdBy    String
  faculty      String
  isAnonymous  Boolean
  university   University @relation(fields: [universityId], references: [universityId])
  user         User       @relation(fields: [createdBy], references: [id])

  likes Likes[]   @relation("ReviewLikes")
}

model Likes {
  id        Int    @default(autoincrement())
  reviewId  Int
  userId    String

  @@id([reviewId, userId])

  review Reviews @relation("ReviewLikes" ,fields: [reviewId], references: [id], onDelete: Cascade)
  user  User    @relation(fields: [userId], references: [id])
}